// Code generated by thriftgo (0.2.5). DO NOT EDIT.

package auth

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type AuthAccount struct {
	Uid      int64  `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
	Username string `thrift:"username,2" frugal:"2,default,string" json:"username"`
	Password string `thrift:"password,3" frugal:"3,default,string" json:"password"`
	CreateIp string `thrift:"createIp,4" frugal:"4,default,string" json:"createIp"`
	Status   int8   `thrift:"status,5" frugal:"5,default,i8" json:"status"`
	SysType  int8   `thrift:"sysType,6" frugal:"6,default,i8" json:"sysType"`
	UserId   int64  `thrift:"userId,7" frugal:"7,default,i64" json:"userId"`
	TenantId int64  `thrift:"tenantId,8" frugal:"8,default,i64" json:"tenantId"`
	IsAdmin  bool   `thrift:"isAdmin,9" frugal:"9,default,bool" json:"isAdmin"`
}

func NewAuthAccount() *AuthAccount {
	return &AuthAccount{}
}

func (p *AuthAccount) InitDefault() {
	*p = AuthAccount{}
}

func (p *AuthAccount) GetUid() (v int64) {
	return p.Uid
}

func (p *AuthAccount) GetUsername() (v string) {
	return p.Username
}

func (p *AuthAccount) GetPassword() (v string) {
	return p.Password
}

func (p *AuthAccount) GetCreateIp() (v string) {
	return p.CreateIp
}

func (p *AuthAccount) GetStatus() (v int8) {
	return p.Status
}

func (p *AuthAccount) GetSysType() (v int8) {
	return p.SysType
}

func (p *AuthAccount) GetUserId() (v int64) {
	return p.UserId
}

func (p *AuthAccount) GetTenantId() (v int64) {
	return p.TenantId
}

func (p *AuthAccount) GetIsAdmin() (v bool) {
	return p.IsAdmin
}
func (p *AuthAccount) SetUid(val int64) {
	p.Uid = val
}
func (p *AuthAccount) SetUsername(val string) {
	p.Username = val
}
func (p *AuthAccount) SetPassword(val string) {
	p.Password = val
}
func (p *AuthAccount) SetCreateIp(val string) {
	p.CreateIp = val
}
func (p *AuthAccount) SetStatus(val int8) {
	p.Status = val
}
func (p *AuthAccount) SetSysType(val int8) {
	p.SysType = val
}
func (p *AuthAccount) SetUserId(val int64) {
	p.UserId = val
}
func (p *AuthAccount) SetTenantId(val int64) {
	p.TenantId = val
}
func (p *AuthAccount) SetIsAdmin(val bool) {
	p.IsAdmin = val
}

var fieldIDToName_AuthAccount = map[int16]string{
	1: "uid",
	2: "username",
	3: "password",
	4: "createIp",
	5: "status",
	6: "sysType",
	7: "userId",
	8: "tenantId",
	9: "isAdmin",
}

func (p *AuthAccount) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthAccount[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthAccount) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *AuthAccount) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *AuthAccount) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *AuthAccount) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateIp = v
	}
	return nil
}

func (p *AuthAccount) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *AuthAccount) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.SysType = v
	}
	return nil
}

func (p *AuthAccount) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *AuthAccount) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TenantId = v
	}
	return nil
}

func (p *AuthAccount) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsAdmin = v
	}
	return nil
}

func (p *AuthAccount) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthAccount"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthAccount) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthAccount) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AuthAccount) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AuthAccount) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createIp", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateIp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AuthAccount) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AuthAccount) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sysType", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.SysType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AuthAccount) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AuthAccount) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tenantId", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TenantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AuthAccount) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isAdmin", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsAdmin); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *AuthAccount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthAccount(%+v)", *p)
}

func (p *AuthAccount) DeepEqual(ano *AuthAccount) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Username) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.SysType) {
		return false
	}
	if !p.Field7DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field8DeepEqual(ano.TenantId) {
		return false
	}
	if !p.Field9DeepEqual(ano.IsAdmin) {
		return false
	}
	return true
}

func (p *AuthAccount) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *AuthAccount) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *AuthAccount) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *AuthAccount) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CreateIp, src) != 0 {
		return false
	}
	return true
}
func (p *AuthAccount) Field5DeepEqual(src int8) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *AuthAccount) Field6DeepEqual(src int8) bool {

	if p.SysType != src {
		return false
	}
	return true
}
func (p *AuthAccount) Field7DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *AuthAccount) Field8DeepEqual(src int64) bool {

	if p.TenantId != src {
		return false
	}
	return true
}
func (p *AuthAccount) Field9DeepEqual(src bool) bool {

	if p.IsAdmin != src {
		return false
	}
	return true
}

type GetByUserIdAndTypeReq struct {
	UserId  int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	SysType int8  `thrift:"sysType,2" frugal:"2,default,i8" json:"sysType"`
}

func NewGetByUserIdAndTypeReq() *GetByUserIdAndTypeReq {
	return &GetByUserIdAndTypeReq{}
}

func (p *GetByUserIdAndTypeReq) InitDefault() {
	*p = GetByUserIdAndTypeReq{}
}

func (p *GetByUserIdAndTypeReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetByUserIdAndTypeReq) GetSysType() (v int8) {
	return p.SysType
}
func (p *GetByUserIdAndTypeReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetByUserIdAndTypeReq) SetSysType(val int8) {
	p.SysType = val
}

var fieldIDToName_GetByUserIdAndTypeReq = map[int16]string{
	1: "userId",
	2: "sysType",
}

func (p *GetByUserIdAndTypeReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetByUserIdAndTypeReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetByUserIdAndTypeReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetByUserIdAndTypeReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.SysType = v
	}
	return nil
}

func (p *GetByUserIdAndTypeReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetByUserIdAndTypeReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetByUserIdAndTypeReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetByUserIdAndTypeReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sysType", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.SysType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetByUserIdAndTypeReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetByUserIdAndTypeReq(%+v)", *p)
}

func (p *GetByUserIdAndTypeReq) DeepEqual(ano *GetByUserIdAndTypeReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SysType) {
		return false
	}
	return true
}

func (p *GetByUserIdAndTypeReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *GetByUserIdAndTypeReq) Field2DeepEqual(src int8) bool {

	if p.SysType != src {
		return false
	}
	return true
}

type GetByUserIdAndTypeResp struct {
	AuthAccount *AuthAccount `thrift:"authAccount,1" frugal:"1,default,AuthAccount" json:"authAccount"`
}

func NewGetByUserIdAndTypeResp() *GetByUserIdAndTypeResp {
	return &GetByUserIdAndTypeResp{}
}

func (p *GetByUserIdAndTypeResp) InitDefault() {
	*p = GetByUserIdAndTypeResp{}
}

var GetByUserIdAndTypeResp_AuthAccount_DEFAULT *AuthAccount

func (p *GetByUserIdAndTypeResp) GetAuthAccount() (v *AuthAccount) {
	if !p.IsSetAuthAccount() {
		return GetByUserIdAndTypeResp_AuthAccount_DEFAULT
	}
	return p.AuthAccount
}
func (p *GetByUserIdAndTypeResp) SetAuthAccount(val *AuthAccount) {
	p.AuthAccount = val
}

var fieldIDToName_GetByUserIdAndTypeResp = map[int16]string{
	1: "authAccount",
}

func (p *GetByUserIdAndTypeResp) IsSetAuthAccount() bool {
	return p.AuthAccount != nil
}

func (p *GetByUserIdAndTypeResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetByUserIdAndTypeResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetByUserIdAndTypeResp) ReadField1(iprot thrift.TProtocol) error {
	p.AuthAccount = NewAuthAccount()
	if err := p.AuthAccount.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetByUserIdAndTypeResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetByUserIdAndTypeResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetByUserIdAndTypeResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("authAccount", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AuthAccount.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetByUserIdAndTypeResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetByUserIdAndTypeResp(%+v)", *p)
}

func (p *GetByUserIdAndTypeResp) DeepEqual(ano *GetByUserIdAndTypeResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AuthAccount) {
		return false
	}
	return true
}

func (p *GetByUserIdAndTypeResp) Field1DeepEqual(src *AuthAccount) bool {

	if !p.AuthAccount.DeepEqual(src) {
		return false
	}
	return true
}

type GetByUidReq struct {
	Uid int64 `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
}

func NewGetByUidReq() *GetByUidReq {
	return &GetByUidReq{}
}

func (p *GetByUidReq) InitDefault() {
	*p = GetByUidReq{}
}

func (p *GetByUidReq) GetUid() (v int64) {
	return p.Uid
}
func (p *GetByUidReq) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_GetByUidReq = map[int16]string{
	1: "uid",
}

func (p *GetByUidReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetByUidReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetByUidReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetByUidReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetByUidReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetByUidReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetByUidReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetByUidReq(%+v)", *p)
}

func (p *GetByUidReq) DeepEqual(ano *GetByUidReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *GetByUidReq) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type GetByUidResp struct {
	AuthAccount *AuthAccount `thrift:"authAccount,1" frugal:"1,default,AuthAccount" json:"authAccount"`
}

func NewGetByUidResp() *GetByUidResp {
	return &GetByUidResp{}
}

func (p *GetByUidResp) InitDefault() {
	*p = GetByUidResp{}
}

var GetByUidResp_AuthAccount_DEFAULT *AuthAccount

func (p *GetByUidResp) GetAuthAccount() (v *AuthAccount) {
	if !p.IsSetAuthAccount() {
		return GetByUidResp_AuthAccount_DEFAULT
	}
	return p.AuthAccount
}
func (p *GetByUidResp) SetAuthAccount(val *AuthAccount) {
	p.AuthAccount = val
}

var fieldIDToName_GetByUidResp = map[int16]string{
	1: "authAccount",
}

func (p *GetByUidResp) IsSetAuthAccount() bool {
	return p.AuthAccount != nil
}

func (p *GetByUidResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetByUidResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetByUidResp) ReadField1(iprot thrift.TProtocol) error {
	p.AuthAccount = NewAuthAccount()
	if err := p.AuthAccount.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetByUidResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetByUidResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetByUidResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("authAccount", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AuthAccount.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetByUidResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetByUidResp(%+v)", *p)
}

func (p *GetByUidResp) DeepEqual(ano *GetByUidResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AuthAccount) {
		return false
	}
	return true
}

func (p *GetByUidResp) Field1DeepEqual(src *AuthAccount) bool {

	if !p.AuthAccount.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePasswordReq struct {
	Uid      int64  `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
	SysType  int8   `thrift:"sysType,2" frugal:"2,default,i8" json:"sysType"`
	Password string `thrift:"password,3" frugal:"3,default,string" json:"password"`
}

func NewUpdatePasswordReq() *UpdatePasswordReq {
	return &UpdatePasswordReq{}
}

func (p *UpdatePasswordReq) InitDefault() {
	*p = UpdatePasswordReq{}
}

func (p *UpdatePasswordReq) GetUid() (v int64) {
	return p.Uid
}

func (p *UpdatePasswordReq) GetSysType() (v int8) {
	return p.SysType
}

func (p *UpdatePasswordReq) GetPassword() (v string) {
	return p.Password
}
func (p *UpdatePasswordReq) SetUid(val int64) {
	p.Uid = val
}
func (p *UpdatePasswordReq) SetSysType(val int8) {
	p.SysType = val
}
func (p *UpdatePasswordReq) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_UpdatePasswordReq = map[int16]string{
	1: "uid",
	2: "sysType",
	3: "password",
}

func (p *UpdatePasswordReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePasswordReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePasswordReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *UpdatePasswordReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.SysType = v
	}
	return nil
}

func (p *UpdatePasswordReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *UpdatePasswordReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePasswordReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePasswordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePasswordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sysType", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.SysType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePasswordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdatePasswordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePasswordReq(%+v)", *p)
}

func (p *UpdatePasswordReq) DeepEqual(ano *UpdatePasswordReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field2DeepEqual(ano.SysType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *UpdatePasswordReq) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *UpdatePasswordReq) Field2DeepEqual(src int8) bool {

	if p.SysType != src {
		return false
	}
	return true
}
func (p *UpdatePasswordReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type UpdatePasswordResp struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewUpdatePasswordResp() *UpdatePasswordResp {
	return &UpdatePasswordResp{}
}

func (p *UpdatePasswordResp) InitDefault() {
	*p = UpdatePasswordResp{}
}

func (p *UpdatePasswordResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *UpdatePasswordResp) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_UpdatePasswordResp = map[int16]string{
	1: "success",
}

func (p *UpdatePasswordResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePasswordResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePasswordResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdatePasswordResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePasswordResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePasswordResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePasswordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePasswordResp(%+v)", *p)
}

func (p *UpdatePasswordResp) DeepEqual(ano *UpdatePasswordResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UpdatePasswordResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type GetAccountByUserNameReq struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
}

func NewGetAccountByUserNameReq() *GetAccountByUserNameReq {
	return &GetAccountByUserNameReq{}
}

func (p *GetAccountByUserNameReq) InitDefault() {
	*p = GetAccountByUserNameReq{}
}

func (p *GetAccountByUserNameReq) GetUsername() (v string) {
	return p.Username
}
func (p *GetAccountByUserNameReq) SetUsername(val string) {
	p.Username = val
}

var fieldIDToName_GetAccountByUserNameReq = map[int16]string{
	1: "username",
}

func (p *GetAccountByUserNameReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAccountByUserNameReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAccountByUserNameReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *GetAccountByUserNameReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAccountByUserNameReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAccountByUserNameReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAccountByUserNameReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccountByUserNameReq(%+v)", *p)
}

func (p *GetAccountByUserNameReq) DeepEqual(ano *GetAccountByUserNameReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *GetAccountByUserNameReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}

type GetAccountByUserNameResp struct {
	AuthAccount *AuthAccount `thrift:"authAccount,1" frugal:"1,default,AuthAccount" json:"authAccount"`
}

func NewGetAccountByUserNameResp() *GetAccountByUserNameResp {
	return &GetAccountByUserNameResp{}
}

func (p *GetAccountByUserNameResp) InitDefault() {
	*p = GetAccountByUserNameResp{}
}

var GetAccountByUserNameResp_AuthAccount_DEFAULT *AuthAccount

func (p *GetAccountByUserNameResp) GetAuthAccount() (v *AuthAccount) {
	if !p.IsSetAuthAccount() {
		return GetAccountByUserNameResp_AuthAccount_DEFAULT
	}
	return p.AuthAccount
}
func (p *GetAccountByUserNameResp) SetAuthAccount(val *AuthAccount) {
	p.AuthAccount = val
}

var fieldIDToName_GetAccountByUserNameResp = map[int16]string{
	1: "authAccount",
}

func (p *GetAccountByUserNameResp) IsSetAuthAccount() bool {
	return p.AuthAccount != nil
}

func (p *GetAccountByUserNameResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAccountByUserNameResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAccountByUserNameResp) ReadField1(iprot thrift.TProtocol) error {
	p.AuthAccount = NewAuthAccount()
	if err := p.AuthAccount.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetAccountByUserNameResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAccountByUserNameResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAccountByUserNameResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("authAccount", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AuthAccount.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAccountByUserNameResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAccountByUserNameResp(%+v)", *p)
}

func (p *GetAccountByUserNameResp) DeepEqual(ano *GetAccountByUserNameResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AuthAccount) {
		return false
	}
	return true
}

func (p *GetAccountByUserNameResp) Field1DeepEqual(src *AuthAccount) bool {

	if !p.AuthAccount.DeepEqual(src) {
		return false
	}
	return true
}

type AuthService interface {
	GetByUserIdAndType(ctx context.Context, req *GetByUserIdAndTypeReq) (r *GetByUserIdAndTypeResp, err error)

	GetByUid(ctx context.Context, req *GetByUidReq) (r *GetByUidResp, err error)

	UpdatePassword(ctx context.Context, req *UpdatePasswordReq) (r *UpdatePasswordResp, err error)

	GetAccountByUserName(ctx context.Context, req *GetAccountByUserNameReq) (r *GetAccountByUserNameResp, err error)
}

type AuthServiceClient struct {
	c thrift.TClient
}

func NewAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthServiceClient {
	return &AuthServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthServiceClient {
	return &AuthServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAuthServiceClient(c thrift.TClient) *AuthServiceClient {
	return &AuthServiceClient{
		c: c,
	}
}

func (p *AuthServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AuthServiceClient) GetByUserIdAndType(ctx context.Context, req *GetByUserIdAndTypeReq) (r *GetByUserIdAndTypeResp, err error) {
	var _args AuthServiceGetByUserIdAndTypeArgs
	_args.Req = req
	var _result AuthServiceGetByUserIdAndTypeResult
	if err = p.Client_().Call(ctx, "getByUserIdAndType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthServiceClient) GetByUid(ctx context.Context, req *GetByUidReq) (r *GetByUidResp, err error) {
	var _args AuthServiceGetByUidArgs
	_args.Req = req
	var _result AuthServiceGetByUidResult
	if err = p.Client_().Call(ctx, "getByUid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthServiceClient) UpdatePassword(ctx context.Context, req *UpdatePasswordReq) (r *UpdatePasswordResp, err error) {
	var _args AuthServiceUpdatePasswordArgs
	_args.Req = req
	var _result AuthServiceUpdatePasswordResult
	if err = p.Client_().Call(ctx, "updatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthServiceClient) GetAccountByUserName(ctx context.Context, req *GetAccountByUserNameReq) (r *GetAccountByUserNameResp, err error) {
	var _args AuthServiceGetAccountByUserNameArgs
	_args.Req = req
	var _result AuthServiceGetAccountByUserNameResult
	if err = p.Client_().Call(ctx, "getAccountByUserName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AuthServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AuthService
}

func (p *AuthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AuthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AuthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAuthServiceProcessor(handler AuthService) *AuthServiceProcessor {
	self := &AuthServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("getByUserIdAndType", &authServiceProcessorGetByUserIdAndType{handler: handler})
	self.AddToProcessorMap("getByUid", &authServiceProcessorGetByUid{handler: handler})
	self.AddToProcessorMap("updatePassword", &authServiceProcessorUpdatePassword{handler: handler})
	self.AddToProcessorMap("getAccountByUserName", &authServiceProcessorGetAccountByUserName{handler: handler})
	return self
}
func (p *AuthServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type authServiceProcessorGetByUserIdAndType struct {
	handler AuthService
}

func (p *authServiceProcessorGetByUserIdAndType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthServiceGetByUserIdAndTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getByUserIdAndType", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthServiceGetByUserIdAndTypeResult{}
	var retval *GetByUserIdAndTypeResp
	if retval, err2 = p.handler.GetByUserIdAndType(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getByUserIdAndType: "+err2.Error())
		oprot.WriteMessageBegin("getByUserIdAndType", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getByUserIdAndType", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authServiceProcessorGetByUid struct {
	handler AuthService
}

func (p *authServiceProcessorGetByUid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthServiceGetByUidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getByUid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthServiceGetByUidResult{}
	var retval *GetByUidResp
	if retval, err2 = p.handler.GetByUid(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getByUid: "+err2.Error())
		oprot.WriteMessageBegin("getByUid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getByUid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authServiceProcessorUpdatePassword struct {
	handler AuthService
}

func (p *authServiceProcessorUpdatePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthServiceUpdatePasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updatePassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthServiceUpdatePasswordResult{}
	var retval *UpdatePasswordResp
	if retval, err2 = p.handler.UpdatePassword(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePassword: "+err2.Error())
		oprot.WriteMessageBegin("updatePassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updatePassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authServiceProcessorGetAccountByUserName struct {
	handler AuthService
}

func (p *authServiceProcessorGetAccountByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthServiceGetAccountByUserNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAccountByUserName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthServiceGetAccountByUserNameResult{}
	var retval *GetAccountByUserNameResp
	if retval, err2 = p.handler.GetAccountByUserName(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAccountByUserName: "+err2.Error())
		oprot.WriteMessageBegin("getAccountByUserName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAccountByUserName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AuthServiceGetByUserIdAndTypeArgs struct {
	Req *GetByUserIdAndTypeReq `thrift:"req,1" frugal:"1,default,GetByUserIdAndTypeReq" json:"req"`
}

func NewAuthServiceGetByUserIdAndTypeArgs() *AuthServiceGetByUserIdAndTypeArgs {
	return &AuthServiceGetByUserIdAndTypeArgs{}
}

func (p *AuthServiceGetByUserIdAndTypeArgs) InitDefault() {
	*p = AuthServiceGetByUserIdAndTypeArgs{}
}

var AuthServiceGetByUserIdAndTypeArgs_Req_DEFAULT *GetByUserIdAndTypeReq

func (p *AuthServiceGetByUserIdAndTypeArgs) GetReq() (v *GetByUserIdAndTypeReq) {
	if !p.IsSetReq() {
		return AuthServiceGetByUserIdAndTypeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthServiceGetByUserIdAndTypeArgs) SetReq(val *GetByUserIdAndTypeReq) {
	p.Req = val
}

var fieldIDToName_AuthServiceGetByUserIdAndTypeArgs = map[int16]string{
	1: "req",
}

func (p *AuthServiceGetByUserIdAndTypeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthServiceGetByUserIdAndTypeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetByUserIdAndTypeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetByUserIdAndTypeReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetByUserIdAndTypeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getByUserIdAndType_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetByUserIdAndTypeArgs(%+v)", *p)
}

func (p *AuthServiceGetByUserIdAndTypeArgs) DeepEqual(ano *AuthServiceGetByUserIdAndTypeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthServiceGetByUserIdAndTypeArgs) Field1DeepEqual(src *GetByUserIdAndTypeReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceGetByUserIdAndTypeResult struct {
	Success *GetByUserIdAndTypeResp `thrift:"success,0,optional" frugal:"0,optional,GetByUserIdAndTypeResp" json:"success,omitempty"`
}

func NewAuthServiceGetByUserIdAndTypeResult() *AuthServiceGetByUserIdAndTypeResult {
	return &AuthServiceGetByUserIdAndTypeResult{}
}

func (p *AuthServiceGetByUserIdAndTypeResult) InitDefault() {
	*p = AuthServiceGetByUserIdAndTypeResult{}
}

var AuthServiceGetByUserIdAndTypeResult_Success_DEFAULT *GetByUserIdAndTypeResp

func (p *AuthServiceGetByUserIdAndTypeResult) GetSuccess() (v *GetByUserIdAndTypeResp) {
	if !p.IsSetSuccess() {
		return AuthServiceGetByUserIdAndTypeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthServiceGetByUserIdAndTypeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetByUserIdAndTypeResp)
}

var fieldIDToName_AuthServiceGetByUserIdAndTypeResult = map[int16]string{
	0: "success",
}

func (p *AuthServiceGetByUserIdAndTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceGetByUserIdAndTypeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetByUserIdAndTypeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetByUserIdAndTypeResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetByUserIdAndTypeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getByUserIdAndType_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthServiceGetByUserIdAndTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetByUserIdAndTypeResult(%+v)", *p)
}

func (p *AuthServiceGetByUserIdAndTypeResult) DeepEqual(ano *AuthServiceGetByUserIdAndTypeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthServiceGetByUserIdAndTypeResult) Field0DeepEqual(src *GetByUserIdAndTypeResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceGetByUidArgs struct {
	Req *GetByUidReq `thrift:"req,1" frugal:"1,default,GetByUidReq" json:"req"`
}

func NewAuthServiceGetByUidArgs() *AuthServiceGetByUidArgs {
	return &AuthServiceGetByUidArgs{}
}

func (p *AuthServiceGetByUidArgs) InitDefault() {
	*p = AuthServiceGetByUidArgs{}
}

var AuthServiceGetByUidArgs_Req_DEFAULT *GetByUidReq

func (p *AuthServiceGetByUidArgs) GetReq() (v *GetByUidReq) {
	if !p.IsSetReq() {
		return AuthServiceGetByUidArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthServiceGetByUidArgs) SetReq(val *GetByUidReq) {
	p.Req = val
}

var fieldIDToName_AuthServiceGetByUidArgs = map[int16]string{
	1: "req",
}

func (p *AuthServiceGetByUidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthServiceGetByUidArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetByUidArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetByUidArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetByUidReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetByUidArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getByUid_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetByUidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthServiceGetByUidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetByUidArgs(%+v)", *p)
}

func (p *AuthServiceGetByUidArgs) DeepEqual(ano *AuthServiceGetByUidArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthServiceGetByUidArgs) Field1DeepEqual(src *GetByUidReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceGetByUidResult struct {
	Success *GetByUidResp `thrift:"success,0,optional" frugal:"0,optional,GetByUidResp" json:"success,omitempty"`
}

func NewAuthServiceGetByUidResult() *AuthServiceGetByUidResult {
	return &AuthServiceGetByUidResult{}
}

func (p *AuthServiceGetByUidResult) InitDefault() {
	*p = AuthServiceGetByUidResult{}
}

var AuthServiceGetByUidResult_Success_DEFAULT *GetByUidResp

func (p *AuthServiceGetByUidResult) GetSuccess() (v *GetByUidResp) {
	if !p.IsSetSuccess() {
		return AuthServiceGetByUidResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthServiceGetByUidResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetByUidResp)
}

var fieldIDToName_AuthServiceGetByUidResult = map[int16]string{
	0: "success",
}

func (p *AuthServiceGetByUidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceGetByUidResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetByUidResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetByUidResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetByUidResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetByUidResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getByUid_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetByUidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthServiceGetByUidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetByUidResult(%+v)", *p)
}

func (p *AuthServiceGetByUidResult) DeepEqual(ano *AuthServiceGetByUidResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthServiceGetByUidResult) Field0DeepEqual(src *GetByUidResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceUpdatePasswordArgs struct {
	Req *UpdatePasswordReq `thrift:"req,1" frugal:"1,default,UpdatePasswordReq" json:"req"`
}

func NewAuthServiceUpdatePasswordArgs() *AuthServiceUpdatePasswordArgs {
	return &AuthServiceUpdatePasswordArgs{}
}

func (p *AuthServiceUpdatePasswordArgs) InitDefault() {
	*p = AuthServiceUpdatePasswordArgs{}
}

var AuthServiceUpdatePasswordArgs_Req_DEFAULT *UpdatePasswordReq

func (p *AuthServiceUpdatePasswordArgs) GetReq() (v *UpdatePasswordReq) {
	if !p.IsSetReq() {
		return AuthServiceUpdatePasswordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthServiceUpdatePasswordArgs) SetReq(val *UpdatePasswordReq) {
	p.Req = val
}

var fieldIDToName_AuthServiceUpdatePasswordArgs = map[int16]string{
	1: "req",
}

func (p *AuthServiceUpdatePasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthServiceUpdatePasswordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceUpdatePasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdatePasswordReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceUpdatePasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updatePassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceUpdatePasswordArgs(%+v)", *p)
}

func (p *AuthServiceUpdatePasswordArgs) DeepEqual(ano *AuthServiceUpdatePasswordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthServiceUpdatePasswordArgs) Field1DeepEqual(src *UpdatePasswordReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceUpdatePasswordResult struct {
	Success *UpdatePasswordResp `thrift:"success,0,optional" frugal:"0,optional,UpdatePasswordResp" json:"success,omitempty"`
}

func NewAuthServiceUpdatePasswordResult() *AuthServiceUpdatePasswordResult {
	return &AuthServiceUpdatePasswordResult{}
}

func (p *AuthServiceUpdatePasswordResult) InitDefault() {
	*p = AuthServiceUpdatePasswordResult{}
}

var AuthServiceUpdatePasswordResult_Success_DEFAULT *UpdatePasswordResp

func (p *AuthServiceUpdatePasswordResult) GetSuccess() (v *UpdatePasswordResp) {
	if !p.IsSetSuccess() {
		return AuthServiceUpdatePasswordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthServiceUpdatePasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePasswordResp)
}

var fieldIDToName_AuthServiceUpdatePasswordResult = map[int16]string{
	0: "success",
}

func (p *AuthServiceUpdatePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceUpdatePasswordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceUpdatePasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdatePasswordResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceUpdatePasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("updatePassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthServiceUpdatePasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceUpdatePasswordResult(%+v)", *p)
}

func (p *AuthServiceUpdatePasswordResult) DeepEqual(ano *AuthServiceUpdatePasswordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthServiceUpdatePasswordResult) Field0DeepEqual(src *UpdatePasswordResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceGetAccountByUserNameArgs struct {
	Req *GetAccountByUserNameReq `thrift:"req,1" frugal:"1,default,GetAccountByUserNameReq" json:"req"`
}

func NewAuthServiceGetAccountByUserNameArgs() *AuthServiceGetAccountByUserNameArgs {
	return &AuthServiceGetAccountByUserNameArgs{}
}

func (p *AuthServiceGetAccountByUserNameArgs) InitDefault() {
	*p = AuthServiceGetAccountByUserNameArgs{}
}

var AuthServiceGetAccountByUserNameArgs_Req_DEFAULT *GetAccountByUserNameReq

func (p *AuthServiceGetAccountByUserNameArgs) GetReq() (v *GetAccountByUserNameReq) {
	if !p.IsSetReq() {
		return AuthServiceGetAccountByUserNameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthServiceGetAccountByUserNameArgs) SetReq(val *GetAccountByUserNameReq) {
	p.Req = val
}

var fieldIDToName_AuthServiceGetAccountByUserNameArgs = map[int16]string{
	1: "req",
}

func (p *AuthServiceGetAccountByUserNameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthServiceGetAccountByUserNameArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetAccountByUserNameArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetAccountByUserNameReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetAccountByUserNameArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getAccountByUserName_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetAccountByUserNameArgs(%+v)", *p)
}

func (p *AuthServiceGetAccountByUserNameArgs) DeepEqual(ano *AuthServiceGetAccountByUserNameArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthServiceGetAccountByUserNameArgs) Field1DeepEqual(src *GetAccountByUserNameReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthServiceGetAccountByUserNameResult struct {
	Success *GetAccountByUserNameResp `thrift:"success,0,optional" frugal:"0,optional,GetAccountByUserNameResp" json:"success,omitempty"`
}

func NewAuthServiceGetAccountByUserNameResult() *AuthServiceGetAccountByUserNameResult {
	return &AuthServiceGetAccountByUserNameResult{}
}

func (p *AuthServiceGetAccountByUserNameResult) InitDefault() {
	*p = AuthServiceGetAccountByUserNameResult{}
}

var AuthServiceGetAccountByUserNameResult_Success_DEFAULT *GetAccountByUserNameResp

func (p *AuthServiceGetAccountByUserNameResult) GetSuccess() (v *GetAccountByUserNameResp) {
	if !p.IsSetSuccess() {
		return AuthServiceGetAccountByUserNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthServiceGetAccountByUserNameResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAccountByUserNameResp)
}

var fieldIDToName_AuthServiceGetAccountByUserNameResult = map[int16]string{
	0: "success",
}

func (p *AuthServiceGetAccountByUserNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthServiceGetAccountByUserNameResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthServiceGetAccountByUserNameResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetAccountByUserNameResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AuthServiceGetAccountByUserNameResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getAccountByUserName_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthServiceGetAccountByUserNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthServiceGetAccountByUserNameResult(%+v)", *p)
}

func (p *AuthServiceGetAccountByUserNameResult) DeepEqual(ano *AuthServiceGetAccountByUserNameResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthServiceGetAccountByUserNameResult) Field0DeepEqual(src *GetAccountByUserNameResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
