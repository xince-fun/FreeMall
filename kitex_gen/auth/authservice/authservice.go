// Code generated by Kitex v0.5.1. DO NOT EDIT.

package authservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	auth "github.com/xince-fun/FreeMall/kitex_gen/auth"
)

func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

var authServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getByUserIdAndType":   kitex.NewMethodInfo(getByUserIdAndTypeHandler, newAuthServiceGetByUserIdAndTypeArgs, newAuthServiceGetByUserIdAndTypeResult, false),
		"getByUid":             kitex.NewMethodInfo(getByUidHandler, newAuthServiceGetByUidArgs, newAuthServiceGetByUidResult, false),
		"updatePassword":       kitex.NewMethodInfo(updatePasswordHandler, newAuthServiceUpdatePasswordArgs, newAuthServiceUpdatePasswordResult, false),
		"getAccountByUserName": kitex.NewMethodInfo(getAccountByUserNameHandler, newAuthServiceGetAccountByUserNameArgs, newAuthServiceGetAccountByUserNameResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func getByUserIdAndTypeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceGetByUserIdAndTypeArgs)
	realResult := result.(*auth.AuthServiceGetByUserIdAndTypeResult)
	success, err := handler.(auth.AuthService).GetByUserIdAndType(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceGetByUserIdAndTypeArgs() interface{} {
	return auth.NewAuthServiceGetByUserIdAndTypeArgs()
}

func newAuthServiceGetByUserIdAndTypeResult() interface{} {
	return auth.NewAuthServiceGetByUserIdAndTypeResult()
}

func getByUidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceGetByUidArgs)
	realResult := result.(*auth.AuthServiceGetByUidResult)
	success, err := handler.(auth.AuthService).GetByUid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceGetByUidArgs() interface{} {
	return auth.NewAuthServiceGetByUidArgs()
}

func newAuthServiceGetByUidResult() interface{} {
	return auth.NewAuthServiceGetByUidResult()
}

func updatePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceUpdatePasswordArgs)
	realResult := result.(*auth.AuthServiceUpdatePasswordResult)
	success, err := handler.(auth.AuthService).UpdatePassword(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceUpdatePasswordArgs() interface{} {
	return auth.NewAuthServiceUpdatePasswordArgs()
}

func newAuthServiceUpdatePasswordResult() interface{} {
	return auth.NewAuthServiceUpdatePasswordResult()
}

func getAccountByUserNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceGetAccountByUserNameArgs)
	realResult := result.(*auth.AuthServiceGetAccountByUserNameResult)
	success, err := handler.(auth.AuthService).GetAccountByUserName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceGetAccountByUserNameArgs() interface{} {
	return auth.NewAuthServiceGetAccountByUserNameArgs()
}

func newAuthServiceGetAccountByUserNameResult() interface{} {
	return auth.NewAuthServiceGetAccountByUserNameResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetByUserIdAndType(ctx context.Context, req *auth.GetByUserIdAndTypeReq) (r *auth.GetByUserIdAndTypeResp, err error) {
	var _args auth.AuthServiceGetByUserIdAndTypeArgs
	_args.Req = req
	var _result auth.AuthServiceGetByUserIdAndTypeResult
	if err = p.c.Call(ctx, "getByUserIdAndType", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetByUid(ctx context.Context, req *auth.GetByUidReq) (r *auth.GetByUidResp, err error) {
	var _args auth.AuthServiceGetByUidArgs
	_args.Req = req
	var _result auth.AuthServiceGetByUidResult
	if err = p.c.Call(ctx, "getByUid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePassword(ctx context.Context, req *auth.UpdatePasswordReq) (r *auth.UpdatePasswordResp, err error) {
	var _args auth.AuthServiceUpdatePasswordArgs
	_args.Req = req
	var _result auth.AuthServiceUpdatePasswordResult
	if err = p.c.Call(ctx, "updatePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAccountByUserName(ctx context.Context, req *auth.GetAccountByUserNameReq) (r *auth.GetAccountByUserNameResp, err error) {
	var _args auth.AuthServiceGetAccountByUserNameArgs
	_args.Req = req
	var _result auth.AuthServiceGetAccountByUserNameResult
	if err = p.c.Call(ctx, "getAccountByUserName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
