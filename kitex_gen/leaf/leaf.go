// Code generated by thriftgo (0.2.5). DO NOT EDIT.

package leaf

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Error int64

const (
	Error_SEG_SERVER_UNSPECIFIED   Error = 0
	Error_BIZ_TAG_NOT_FOUND        Error = 1
	Error_DB_ERROR                 Error = 2
	Error_ID_CACHE_INIT_FAILED     Error = 3
	Error_ID_TWO_SEGMENTS_ARE_NULL Error = 4
	Error_SNOWFLAKE_TIME_EXCEPTION Error = 5
	Error_SNOWFLAKE_ID_ILLEGAL     Error = 6
)

func (p Error) String() string {
	switch p {
	case Error_SEG_SERVER_UNSPECIFIED:
		return "SEG_SERVER_UNSPECIFIED"
	case Error_BIZ_TAG_NOT_FOUND:
		return "BIZ_TAG_NOT_FOUND"
	case Error_DB_ERROR:
		return "DB_ERROR"
	case Error_ID_CACHE_INIT_FAILED:
		return "ID_CACHE_INIT_FAILED"
	case Error_ID_TWO_SEGMENTS_ARE_NULL:
		return "ID_TWO_SEGMENTS_ARE_NULL"
	case Error_SNOWFLAKE_TIME_EXCEPTION:
		return "SNOWFLAKE_TIME_EXCEPTION"
	case Error_SNOWFLAKE_ID_ILLEGAL:
		return "SNOWFLAKE_ID_ILLEGAL"
	}
	return "<UNSET>"
}

func ErrorFromString(s string) (Error, error) {
	switch s {
	case "SEG_SERVER_UNSPECIFIED":
		return Error_SEG_SERVER_UNSPECIFIED, nil
	case "BIZ_TAG_NOT_FOUND":
		return Error_BIZ_TAG_NOT_FOUND, nil
	case "DB_ERROR":
		return Error_DB_ERROR, nil
	case "ID_CACHE_INIT_FAILED":
		return Error_ID_CACHE_INIT_FAILED, nil
	case "ID_TWO_SEGMENTS_ARE_NULL":
		return Error_ID_TWO_SEGMENTS_ARE_NULL, nil
	case "SNOWFLAKE_TIME_EXCEPTION":
		return Error_SNOWFLAKE_TIME_EXCEPTION, nil
	case "SNOWFLAKE_ID_ILLEGAL":
		return Error_SNOWFLAKE_ID_ILLEGAL, nil
	}
	return Error(0), fmt.Errorf("not a valid Error string")
}

func ErrorPtr(v Error) *Error { return &v }
func (p *Error) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Error(result.Int64)
	return
}

func (p *Error) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IdRequest struct {
	Tag string `thrift:"tag,1" frugal:"1,default,string" json:"tag"`
}

func NewIdRequest() *IdRequest {
	return &IdRequest{}
}

func (p *IdRequest) InitDefault() {
	*p = IdRequest{}
}

func (p *IdRequest) GetTag() (v string) {
	return p.Tag
}
func (p *IdRequest) SetTag(val string) {
	p.Tag = val
}

var fieldIDToName_IdRequest = map[int16]string{
	1: "tag",
}

func (p *IdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IdRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tag = v
	}
	return nil
}

func (p *IdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdRequest(%+v)", *p)
}

func (p *IdRequest) DeepEqual(ano *IdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tag) {
		return false
	}
	return true
}

func (p *IdRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Tag, src) != 0 {
		return false
	}
	return true
}

type IdResponse struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewIdResponse() *IdResponse {
	return &IdResponse{}
}

func (p *IdResponse) InitDefault() {
	*p = IdResponse{}
}

func (p *IdResponse) GetId() (v string) {
	return p.Id
}
func (p *IdResponse) SetId(val string) {
	p.Id = val
}

var fieldIDToName_IdResponse = map[int16]string{
	1: "id",
}

func (p *IdResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IdResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IdResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *IdResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IdResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdResponse(%+v)", *p)
}

func (p *IdResponse) DeepEqual(ano *IdResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *IdResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}

type DecodeSnokflakeRequest struct {
	Id string `thrift:"id,1" frugal:"1,default,string" json:"id"`
}

func NewDecodeSnokflakeRequest() *DecodeSnokflakeRequest {
	return &DecodeSnokflakeRequest{}
}

func (p *DecodeSnokflakeRequest) InitDefault() {
	*p = DecodeSnokflakeRequest{}
}

func (p *DecodeSnokflakeRequest) GetId() (v string) {
	return p.Id
}
func (p *DecodeSnokflakeRequest) SetId(val string) {
	p.Id = val
}

var fieldIDToName_DecodeSnokflakeRequest = map[int16]string{
	1: "id",
}

func (p *DecodeSnokflakeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DecodeSnokflakeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DecodeSnokflakeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *DecodeSnokflakeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeSnokflakeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DecodeSnokflakeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DecodeSnokflakeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecodeSnokflakeRequest(%+v)", *p)
}

func (p *DecodeSnokflakeRequest) DeepEqual(ano *DecodeSnokflakeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DecodeSnokflakeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}

type DecodeSnokflakeResponse struct {
	Timestamp  string `thrift:"timestamp,1" frugal:"1,default,string" json:"timestamp"`
	SequenceId string `thrift:"sequenceId,2" frugal:"2,default,string" json:"sequenceId"`
	WorkerId   string `thrift:"workerId,3" frugal:"3,default,string" json:"workerId"`
}

func NewDecodeSnokflakeResponse() *DecodeSnokflakeResponse {
	return &DecodeSnokflakeResponse{}
}

func (p *DecodeSnokflakeResponse) InitDefault() {
	*p = DecodeSnokflakeResponse{}
}

func (p *DecodeSnokflakeResponse) GetTimestamp() (v string) {
	return p.Timestamp
}

func (p *DecodeSnokflakeResponse) GetSequenceId() (v string) {
	return p.SequenceId
}

func (p *DecodeSnokflakeResponse) GetWorkerId() (v string) {
	return p.WorkerId
}
func (p *DecodeSnokflakeResponse) SetTimestamp(val string) {
	p.Timestamp = val
}
func (p *DecodeSnokflakeResponse) SetSequenceId(val string) {
	p.SequenceId = val
}
func (p *DecodeSnokflakeResponse) SetWorkerId(val string) {
	p.WorkerId = val
}

var fieldIDToName_DecodeSnokflakeResponse = map[int16]string{
	1: "timestamp",
	2: "sequenceId",
	3: "workerId",
}

func (p *DecodeSnokflakeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DecodeSnokflakeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DecodeSnokflakeResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *DecodeSnokflakeResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *DecodeSnokflakeResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *DecodeSnokflakeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeSnokflakeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DecodeSnokflakeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Timestamp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DecodeSnokflakeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sequenceId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SequenceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DecodeSnokflakeResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workerId", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkerId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DecodeSnokflakeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecodeSnokflakeResponse(%+v)", *p)
}

func (p *DecodeSnokflakeResponse) DeepEqual(ano *DecodeSnokflakeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field2DeepEqual(ano.SequenceId) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkerId) {
		return false
	}
	return true
}

func (p *DecodeSnokflakeResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Timestamp, src) != 0 {
		return false
	}
	return true
}
func (p *DecodeSnokflakeResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SequenceId, src) != 0 {
		return false
	}
	return true
}
func (p *DecodeSnokflakeResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.WorkerId, src) != 0 {
		return false
	}
	return true
}

type LeafService interface {
	GenSegmentId(ctx context.Context, request *IdRequest) (r *IdResponse, err error)

	GenSnowflakeId(ctx context.Context, request *IdRequest) (r *IdResponse, err error)

	DecodeSnowflakeId(ctx context.Context, request *DecodeSnokflakeRequest) (r *DecodeSnokflakeResponse, err error)
}

type LeafServiceClient struct {
	c thrift.TClient
}

func NewLeafServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LeafServiceClient {
	return &LeafServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLeafServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LeafServiceClient {
	return &LeafServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLeafServiceClient(c thrift.TClient) *LeafServiceClient {
	return &LeafServiceClient{
		c: c,
	}
}

func (p *LeafServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LeafServiceClient) GenSegmentId(ctx context.Context, request *IdRequest) (r *IdResponse, err error) {
	var _args LeafServiceGenSegmentIdArgs
	_args.Request = request
	var _result LeafServiceGenSegmentIdResult
	if err = p.Client_().Call(ctx, "GenSegmentId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LeafServiceClient) GenSnowflakeId(ctx context.Context, request *IdRequest) (r *IdResponse, err error) {
	var _args LeafServiceGenSnowflakeIdArgs
	_args.Request = request
	var _result LeafServiceGenSnowflakeIdResult
	if err = p.Client_().Call(ctx, "GenSnowflakeId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LeafServiceClient) DecodeSnowflakeId(ctx context.Context, request *DecodeSnokflakeRequest) (r *DecodeSnokflakeResponse, err error) {
	var _args LeafServiceDecodeSnowflakeIdArgs
	_args.Request = request
	var _result LeafServiceDecodeSnowflakeIdResult
	if err = p.Client_().Call(ctx, "DecodeSnowflakeId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LeafServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LeafService
}

func (p *LeafServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LeafServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LeafServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLeafServiceProcessor(handler LeafService) *LeafServiceProcessor {
	self := &LeafServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GenSegmentId", &leafServiceProcessorGenSegmentId{handler: handler})
	self.AddToProcessorMap("GenSnowflakeId", &leafServiceProcessorGenSnowflakeId{handler: handler})
	self.AddToProcessorMap("DecodeSnowflakeId", &leafServiceProcessorDecodeSnowflakeId{handler: handler})
	return self
}
func (p *LeafServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type leafServiceProcessorGenSegmentId struct {
	handler LeafService
}

func (p *leafServiceProcessorGenSegmentId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LeafServiceGenSegmentIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenSegmentId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LeafServiceGenSegmentIdResult{}
	var retval *IdResponse
	if retval, err2 = p.handler.GenSegmentId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenSegmentId: "+err2.Error())
		oprot.WriteMessageBegin("GenSegmentId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenSegmentId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type leafServiceProcessorGenSnowflakeId struct {
	handler LeafService
}

func (p *leafServiceProcessorGenSnowflakeId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LeafServiceGenSnowflakeIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenSnowflakeId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LeafServiceGenSnowflakeIdResult{}
	var retval *IdResponse
	if retval, err2 = p.handler.GenSnowflakeId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenSnowflakeId: "+err2.Error())
		oprot.WriteMessageBegin("GenSnowflakeId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenSnowflakeId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type leafServiceProcessorDecodeSnowflakeId struct {
	handler LeafService
}

func (p *leafServiceProcessorDecodeSnowflakeId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LeafServiceDecodeSnowflakeIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DecodeSnowflakeId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LeafServiceDecodeSnowflakeIdResult{}
	var retval *DecodeSnokflakeResponse
	if retval, err2 = p.handler.DecodeSnowflakeId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DecodeSnowflakeId: "+err2.Error())
		oprot.WriteMessageBegin("DecodeSnowflakeId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DecodeSnowflakeId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LeafServiceGenSegmentIdArgs struct {
	Request *IdRequest `thrift:"request,1" frugal:"1,default,IdRequest" json:"request"`
}

func NewLeafServiceGenSegmentIdArgs() *LeafServiceGenSegmentIdArgs {
	return &LeafServiceGenSegmentIdArgs{}
}

func (p *LeafServiceGenSegmentIdArgs) InitDefault() {
	*p = LeafServiceGenSegmentIdArgs{}
}

var LeafServiceGenSegmentIdArgs_Request_DEFAULT *IdRequest

func (p *LeafServiceGenSegmentIdArgs) GetRequest() (v *IdRequest) {
	if !p.IsSetRequest() {
		return LeafServiceGenSegmentIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LeafServiceGenSegmentIdArgs) SetRequest(val *IdRequest) {
	p.Request = val
}

var fieldIDToName_LeafServiceGenSegmentIdArgs = map[int16]string{
	1: "request",
}

func (p *LeafServiceGenSegmentIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LeafServiceGenSegmentIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceGenSegmentIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewIdRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceGenSegmentIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenSegmentId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceGenSegmentIdArgs(%+v)", *p)
}

func (p *LeafServiceGenSegmentIdArgs) DeepEqual(ano *LeafServiceGenSegmentIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *LeafServiceGenSegmentIdArgs) Field1DeepEqual(src *IdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type LeafServiceGenSegmentIdResult struct {
	Success *IdResponse `thrift:"success,0,optional" frugal:"0,optional,IdResponse" json:"success,omitempty"`
}

func NewLeafServiceGenSegmentIdResult() *LeafServiceGenSegmentIdResult {
	return &LeafServiceGenSegmentIdResult{}
}

func (p *LeafServiceGenSegmentIdResult) InitDefault() {
	*p = LeafServiceGenSegmentIdResult{}
}

var LeafServiceGenSegmentIdResult_Success_DEFAULT *IdResponse

func (p *LeafServiceGenSegmentIdResult) GetSuccess() (v *IdResponse) {
	if !p.IsSetSuccess() {
		return LeafServiceGenSegmentIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LeafServiceGenSegmentIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*IdResponse)
}

var fieldIDToName_LeafServiceGenSegmentIdResult = map[int16]string{
	0: "success",
}

func (p *LeafServiceGenSegmentIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LeafServiceGenSegmentIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceGenSegmentIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewIdResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceGenSegmentIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenSegmentId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LeafServiceGenSegmentIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceGenSegmentIdResult(%+v)", *p)
}

func (p *LeafServiceGenSegmentIdResult) DeepEqual(ano *LeafServiceGenSegmentIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LeafServiceGenSegmentIdResult) Field0DeepEqual(src *IdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LeafServiceGenSnowflakeIdArgs struct {
	Request *IdRequest `thrift:"request,1" frugal:"1,default,IdRequest" json:"request"`
}

func NewLeafServiceGenSnowflakeIdArgs() *LeafServiceGenSnowflakeIdArgs {
	return &LeafServiceGenSnowflakeIdArgs{}
}

func (p *LeafServiceGenSnowflakeIdArgs) InitDefault() {
	*p = LeafServiceGenSnowflakeIdArgs{}
}

var LeafServiceGenSnowflakeIdArgs_Request_DEFAULT *IdRequest

func (p *LeafServiceGenSnowflakeIdArgs) GetRequest() (v *IdRequest) {
	if !p.IsSetRequest() {
		return LeafServiceGenSnowflakeIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LeafServiceGenSnowflakeIdArgs) SetRequest(val *IdRequest) {
	p.Request = val
}

var fieldIDToName_LeafServiceGenSnowflakeIdArgs = map[int16]string{
	1: "request",
}

func (p *LeafServiceGenSnowflakeIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LeafServiceGenSnowflakeIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceGenSnowflakeIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewIdRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceGenSnowflakeIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenSnowflakeId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceGenSnowflakeIdArgs(%+v)", *p)
}

func (p *LeafServiceGenSnowflakeIdArgs) DeepEqual(ano *LeafServiceGenSnowflakeIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *LeafServiceGenSnowflakeIdArgs) Field1DeepEqual(src *IdRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type LeafServiceGenSnowflakeIdResult struct {
	Success *IdResponse `thrift:"success,0,optional" frugal:"0,optional,IdResponse" json:"success,omitempty"`
}

func NewLeafServiceGenSnowflakeIdResult() *LeafServiceGenSnowflakeIdResult {
	return &LeafServiceGenSnowflakeIdResult{}
}

func (p *LeafServiceGenSnowflakeIdResult) InitDefault() {
	*p = LeafServiceGenSnowflakeIdResult{}
}

var LeafServiceGenSnowflakeIdResult_Success_DEFAULT *IdResponse

func (p *LeafServiceGenSnowflakeIdResult) GetSuccess() (v *IdResponse) {
	if !p.IsSetSuccess() {
		return LeafServiceGenSnowflakeIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LeafServiceGenSnowflakeIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*IdResponse)
}

var fieldIDToName_LeafServiceGenSnowflakeIdResult = map[int16]string{
	0: "success",
}

func (p *LeafServiceGenSnowflakeIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LeafServiceGenSnowflakeIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceGenSnowflakeIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewIdResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceGenSnowflakeIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenSnowflakeId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LeafServiceGenSnowflakeIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceGenSnowflakeIdResult(%+v)", *p)
}

func (p *LeafServiceGenSnowflakeIdResult) DeepEqual(ano *LeafServiceGenSnowflakeIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LeafServiceGenSnowflakeIdResult) Field0DeepEqual(src *IdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LeafServiceDecodeSnowflakeIdArgs struct {
	Request *DecodeSnokflakeRequest `thrift:"request,1" frugal:"1,default,DecodeSnokflakeRequest" json:"request"`
}

func NewLeafServiceDecodeSnowflakeIdArgs() *LeafServiceDecodeSnowflakeIdArgs {
	return &LeafServiceDecodeSnowflakeIdArgs{}
}

func (p *LeafServiceDecodeSnowflakeIdArgs) InitDefault() {
	*p = LeafServiceDecodeSnowflakeIdArgs{}
}

var LeafServiceDecodeSnowflakeIdArgs_Request_DEFAULT *DecodeSnokflakeRequest

func (p *LeafServiceDecodeSnowflakeIdArgs) GetRequest() (v *DecodeSnokflakeRequest) {
	if !p.IsSetRequest() {
		return LeafServiceDecodeSnowflakeIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LeafServiceDecodeSnowflakeIdArgs) SetRequest(val *DecodeSnokflakeRequest) {
	p.Request = val
}

var fieldIDToName_LeafServiceDecodeSnowflakeIdArgs = map[int16]string{
	1: "request",
}

func (p *LeafServiceDecodeSnowflakeIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LeafServiceDecodeSnowflakeIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceDecodeSnowflakeIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDecodeSnokflakeRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceDecodeSnowflakeIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeSnowflakeId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceDecodeSnowflakeIdArgs(%+v)", *p)
}

func (p *LeafServiceDecodeSnowflakeIdArgs) DeepEqual(ano *LeafServiceDecodeSnowflakeIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *LeafServiceDecodeSnowflakeIdArgs) Field1DeepEqual(src *DecodeSnokflakeRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type LeafServiceDecodeSnowflakeIdResult struct {
	Success *DecodeSnokflakeResponse `thrift:"success,0,optional" frugal:"0,optional,DecodeSnokflakeResponse" json:"success,omitempty"`
}

func NewLeafServiceDecodeSnowflakeIdResult() *LeafServiceDecodeSnowflakeIdResult {
	return &LeafServiceDecodeSnowflakeIdResult{}
}

func (p *LeafServiceDecodeSnowflakeIdResult) InitDefault() {
	*p = LeafServiceDecodeSnowflakeIdResult{}
}

var LeafServiceDecodeSnowflakeIdResult_Success_DEFAULT *DecodeSnokflakeResponse

func (p *LeafServiceDecodeSnowflakeIdResult) GetSuccess() (v *DecodeSnokflakeResponse) {
	if !p.IsSetSuccess() {
		return LeafServiceDecodeSnowflakeIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LeafServiceDecodeSnowflakeIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*DecodeSnokflakeResponse)
}

var fieldIDToName_LeafServiceDecodeSnowflakeIdResult = map[int16]string{
	0: "success",
}

func (p *LeafServiceDecodeSnowflakeIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LeafServiceDecodeSnowflakeIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LeafServiceDecodeSnowflakeIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDecodeSnokflakeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LeafServiceDecodeSnowflakeIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeSnowflakeId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LeafServiceDecodeSnowflakeIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LeafServiceDecodeSnowflakeIdResult(%+v)", *p)
}

func (p *LeafServiceDecodeSnowflakeIdResult) DeepEqual(ano *LeafServiceDecodeSnowflakeIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LeafServiceDecodeSnowflakeIdResult) Field0DeepEqual(src *DecodeSnokflakeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
