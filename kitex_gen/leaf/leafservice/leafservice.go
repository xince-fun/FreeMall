// Code generated by Kitex v0.5.1. DO NOT EDIT.

package leafservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	leaf "github.com/xince-fun/FreeMall/kitex_gen/leaf"
)

func serviceInfo() *kitex.ServiceInfo {
	return leafServiceServiceInfo
}

var leafServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LeafService"
	handlerType := (*leaf.LeafService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GenSegmentId":      kitex.NewMethodInfo(genSegmentIdHandler, newLeafServiceGenSegmentIdArgs, newLeafServiceGenSegmentIdResult, false),
		"GenSnowflakeId":    kitex.NewMethodInfo(genSnowflakeIdHandler, newLeafServiceGenSnowflakeIdArgs, newLeafServiceGenSnowflakeIdResult, false),
		"DecodeSnowflakeId": kitex.NewMethodInfo(decodeSnowflakeIdHandler, newLeafServiceDecodeSnowflakeIdArgs, newLeafServiceDecodeSnowflakeIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "leaf",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func genSegmentIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*leaf.LeafServiceGenSegmentIdArgs)
	realResult := result.(*leaf.LeafServiceGenSegmentIdResult)
	success, err := handler.(leaf.LeafService).GenSegmentId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLeafServiceGenSegmentIdArgs() interface{} {
	return leaf.NewLeafServiceGenSegmentIdArgs()
}

func newLeafServiceGenSegmentIdResult() interface{} {
	return leaf.NewLeafServiceGenSegmentIdResult()
}

func genSnowflakeIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*leaf.LeafServiceGenSnowflakeIdArgs)
	realResult := result.(*leaf.LeafServiceGenSnowflakeIdResult)
	success, err := handler.(leaf.LeafService).GenSnowflakeId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLeafServiceGenSnowflakeIdArgs() interface{} {
	return leaf.NewLeafServiceGenSnowflakeIdArgs()
}

func newLeafServiceGenSnowflakeIdResult() interface{} {
	return leaf.NewLeafServiceGenSnowflakeIdResult()
}

func decodeSnowflakeIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*leaf.LeafServiceDecodeSnowflakeIdArgs)
	realResult := result.(*leaf.LeafServiceDecodeSnowflakeIdResult)
	success, err := handler.(leaf.LeafService).DecodeSnowflakeId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLeafServiceDecodeSnowflakeIdArgs() interface{} {
	return leaf.NewLeafServiceDecodeSnowflakeIdArgs()
}

func newLeafServiceDecodeSnowflakeIdResult() interface{} {
	return leaf.NewLeafServiceDecodeSnowflakeIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenSegmentId(ctx context.Context, request *leaf.IdRequest) (r *leaf.IdResponse, err error) {
	var _args leaf.LeafServiceGenSegmentIdArgs
	_args.Request = request
	var _result leaf.LeafServiceGenSegmentIdResult
	if err = p.c.Call(ctx, "GenSegmentId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenSnowflakeId(ctx context.Context, request *leaf.IdRequest) (r *leaf.IdResponse, err error) {
	var _args leaf.LeafServiceGenSnowflakeIdArgs
	_args.Request = request
	var _result leaf.LeafServiceGenSnowflakeIdResult
	if err = p.c.Call(ctx, "GenSnowflakeId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DecodeSnowflakeId(ctx context.Context, request *leaf.DecodeSnokflakeRequest) (r *leaf.DecodeSnokflakeResponse, err error) {
	var _args leaf.LeafServiceDecodeSnowflakeIdArgs
	_args.Request = request
	var _result leaf.LeafServiceDecodeSnowflakeIdResult
	if err = p.c.Call(ctx, "DecodeSnowflakeId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
