// Code generated by hertz generator.

package leaf

import (
	"context"
	"github.com/xince-fun/FreeMall/app/api/rpc"
	leaf2 "github.com/xince-fun/FreeMall/kitex_gen/leaf"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	leaf "github.com/xince-fun/FreeMall/hertz_gen/leaf"
)

// GenSegmentId .
// @router v1/segment [POST]
func GenSegmentId(ctx context.Context, c *app.RequestContext) {
	var err error
	var req leaf.IdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := rpc.GetSegmentId(context.Background(), &leaf2.IdRequest{
		Tag: req.Tag,
	})
	resp := new(leaf.IdResponse)
	resp.ID = id
	c.JSON(consts.StatusOK, resp)
}

// GenSnowflakeId .
// @router v1/snowflake [POST]
func GenSnowflakeId(ctx context.Context, c *app.RequestContext) {
	var err error
	var req leaf.IdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id, err := rpc.GetSnowflakeId(context.Background(), &leaf2.IdRequest{
		Tag: req.Tag,
	})
	resp := new(leaf.IdResponse)
	resp.ID = id
	c.JSON(consts.StatusOK, resp)
}

// DecodeSnowflakeId .
// @router v1/snowflake/decode [POST]
func DecodeSnowflakeId(ctx context.Context, c *app.RequestContext) {
	var err error
	var req leaf.DecodeSnokflakeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(leaf.DecodeSnokflakeResponse)

	c.JSON(consts.StatusOK, resp)
}
